name: Build

on:
  workflow_dispatch:
    inputs:
      publish:
        description: Write 'PUBLISH' to publish to pypi.
      publish_test:
        description: Write 'PUBLISH_TEST' to publish to pypi.
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
    env:
      CIBW_ARCHS_LINUX: auto64,aarch64
      CIBW_BUILD: cp37* cp39-macosx_arm64
    
    steps:
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64
      - name: Set up windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Install deps
          choco install -y gperf
          # Optional: update PATH for tools installed by Chocolatey
          echo "##vso[task.prependpath]C:\\ProgramData\\chocolatey\\bin"
          # Install vcpkg
          # git clone https://github.com/microsoft/vcpkg.git
          # cd vcpkg
          # ./bootstrap-vcpkg.bat

          # # Install zlib using vcpkg
          # ./vcpkg install zlib
          # echo "set(CMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake)" >> $GITHUB_ENV
      - name: vcpkg build
        uses: johnwason/vcpkg-action@v6
        id: vcpkg
        with:
          pkgs: zlib
          triplet: x64-windows-release
          token: ${{ github.token }}
          github-binarycache: true
      - name: test windows build
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} -S tdlight -B build -DCMAKE_BUILD_TYPE=Release

      # - name: Setup PHP
      #   id: setup-php
      #   uses: shivammathur/setup-php@v2
      # - name: Split sources
      #   run: cd tdlight && php SplitSource.php
      
      - uses: actions/checkout@v4
        with:
          submodules: recursive


      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD_VERBOSITY: 1
        with:
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_all:
    needs: build_wheels
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: needs.build_wheels.result == 'success' && github.event.inputs.publish == 'PUBLISH'
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
  upload_pypi_test:
    needs: build_wheels
    environment: pypitest
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: needs.build_wheels.result == 'success' && github.event.inputs.publish_test == 'PUBLISH_TEST'

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip_existing: true
        repository_url: https://test.pypi.org/legacy/
