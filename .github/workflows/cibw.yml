name: Build

on:
  workflow_dispatch:
    inputs:
      publish:
        description: Write 'PUBLISH' to publish to pypi.
      publish_test:
        description: Write 'PUBLISH_TEST' to publish to pypi.
  push:
  pull_request:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        # os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        os: [windows-latest]
    env:
      CIBW_ARCHS_LINUX: auto64,aarch64
      CIBW_BUILD: cp37* cp39-macosx_arm64

    steps:
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm64

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Copy files
        run: |
          cp CMakePresets.json tdlight/

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5
      - name: 
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV

      - name: Set up windows - gperf
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install -y gperf
          echo "##vso[task.prependpath]C:\\ProgramData\\chocolatey\\bin"

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        # if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake+vcpkg+Ninja to build packages and generate/build the code.
        uses: lukka/run-cmake@v10
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/tdlight/CMakeLists.txt'
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-vcpkg-release'

            #  - name: run cmake - windows
            #    # if: runner.os == 'Windows'
            #    run: |
            #      cmake --preset ninja-multi-vcpkg -S tdlight -B build

      - name: Setup macos
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.os }}" == "macos-13" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
          elif [ "${{ matrix.os }}" == "macos-14" ]; then
            echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
          fi

      - name: Setup macos-13
        if: matrix.os == 'macos-13'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BUILD_VERBOSITY: 1
        with:
          only: ${{ matrix.only }}

      - name: Run sccache stat for check
        shell: bash
        run: ${SCCACHE_PATH} --show-stats

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  upload_all:
    needs: build_wheels
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: needs.build_wheels.result == 'success' && github.event.inputs.publish == 'PUBLISH'
    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1

  upload_pypi_test:
    needs: build_wheels
    environment: pypitest
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: needs.build_wheels.result == 'success' && github.event.inputs.publish_test == 'PUBLISH_TEST'

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip_existing: true
        repository_url: https://test.pypi.org/legacy/
